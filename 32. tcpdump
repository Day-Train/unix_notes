# Writing tcpdump Filters

@@@@@@@@@
@ BPFs! @
@@@@@@@@@

# Show me things that are tcp!
# Consider filtering for "tcp" vs. the ip offset ip[9] = 6
$ tcpdump -r wireshark-df.pcap -nt -vv ip[9]=6

# General Filters
<protocol header> [offset: length] <relation> <value>       # note that length is treated in bytes
ip[9] = 0x1             # Filter where protocal is icmp
tcp[2:2] != 80          # Filter where source port is not http/80 
tcp[4:4] = 1233655299   # Filter on sequence number
udp[4:2] > 0            # Filter where UDP datagram length greater than 0
icmp[0] = 0x03 && icmp[1] = 0x01    # Filter where "network unreachable" && "host unreachable
host 192.168.1.1        # Specify host IP address (source or dest)
dst host 192.168.2.109 # Filter destination host IP address, in decimal
dst host 0xc0a8026d     # Filter in hex

##############
# Bitmasking #
##############
# Consider the IP header length (IHL) which is the four low-order bits of offset zero in the IP header ip[0]
# I want to find packets where IHL > 20 bytes

ip[0] > 0x45        # Fails!

4-bit IP version    4-bit IHL
0   1   0   0       0   0   0   0

# Solution is to "AND" unwanted bits with 0s to zeroize them and "AND" wanted bits with 1s
# In the case above we would set a mask value of 0x0f and bitmask it against ip[0], turning off unwanted bits and preserving wanted ones

ip[0] & 0x0f > 0x5  # Solution!

# Note: & for bitwise masking... && for logical AND (consider using "and" instead to avoid confusion)

# A few more examples...
tcp[13] = 0x02  # SYN bit only set
tcp[13] = 2     # ...in decimal

# SYN ACK bits set, ignoring ECN bits
tcp[13] & 0x3f = 0x12

tcp[13] = 0x18  # ACK and PUSH only set
tcp[13] = 24    # ...in decimal

# I want to find packets where only the SYN and FIN bits are set
tcp[13] = 0x03

# I want to find packets where the SYN and FIN bits are set, and do not care otherwise
tcp[13] & 0x03 = 0x03

# I want to find packets where the SYN or FIN bits are set, and do not care otherwise
tcp[13] & 0x03 != 0

# Filter to chech BOTH the FIN and RST bits are set? (no other bits are set)
tcp[13] = 0x05

# Filter where PSH and ACK are both set and other flags can be set?
tcp[13] & 0x18 = 0x18

# Filter where either or both the PSH and FIN are set?
tcp[13] & 0x09 != 0

#############
# Use cases #
#############
1. Find me the unique TCP services within our network that appear to be listening?
# (a) Mask off the ECN flags, (b) Look for SYN-ACK bits set (c) Define your network's source range (d) Various text processing for statistics as needed
tcpdump -nt -r <filename> 'tcp[13] & 0x3f = 0x12 and src net 170.129.0.0/16' | cut -d ' ' -f 2 | cut -d . -f 5 | sort -V | uniq -c | wc -l

2. Find me the attempted TCP connections destined to external hosts?
# (a) Define packets going out with SYN bit set (b) define and exclude my network's internal ranges
tcpdump -nt -r <filename> 'tcp[13] = 0x02 and dst net not 192.168.0.0/16 and dst net not 10.200.200.0/24 and dst net not 172.16.0.0/12' | wc -l

3. Find me data with data on the SYN (TPC Fast Open). Note I've created a filter for only SYN packets, and created a filter expression that checks the IP and TCP header length and sees if the packet is greater than this sum.
$ tcpdump -n -r - '(tcp[13] & 0x3f = 0x02) and len > (((ip[0] & 0x0f)*4) + ((tcp[12] & 0xf0)*4))' -X